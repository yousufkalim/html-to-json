import{DOMParser as t}from"xmldom";async function e(e,n=!1){return await new Promise((r,o)=>{try{const o={};let s;if("string"==typeof e){const n=(new t).parseFromString(e,"text/xml");n.firstChild&&(s=n.firstChild)}else s=e;const i=(t,e=o)=>{e.type=t.nodeName;const n=t.childNodes;if(null!==n&&n.length){e.content=[];for(let t=0;t<n.length;t++)3===n[t].nodeType?n[t].nodeValue&&e.content.push(n[t].nodeValue):(e.content.push({}),i(n[t],e.content[e.content.length-1]))}if(null!==t.attributes&&t.attributes.length){e.attributes={};for(let n=0;n<t.attributes.length;n++)e.attributes[t.attributes[n].nodeName]=t.attributes[n].nodeValue}};i(s),r(n?JSON.stringify(o):o)}catch(t){o(t)}})}const n=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"];async function r(e,r=!0){return await new Promise((o,s)=>{try{let s=e;"string"==typeof e&&(s=JSON.parse(e));const i=t=>{let e=`<${t.type}`;return t.attributes&&Object.entries(t.attributes).forEach(([t,n])=>{e+=` ${t}="${n}"`}),e+=">",t.content&&t.content.forEach(t=>{e+="string"==typeof t?t:i(t)}),n.includes(t.type)||(e+=`</${t.type}>`),e},a=i(s);o(r?a:(new t).parseFromString(a,"text/xml"))}catch(t){s(t)}})}export{e as HTMLToJSON,r as JSONToHTML};
//# sourceMappingURL=index.modern.js.map
