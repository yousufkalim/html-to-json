import{DOMParser as t}from"xmldom";var e=function(e,r){void 0===r&&(r=!1);try{return Promise.resolve(new Promise(function(n,o){try{var i,a={};if("string"==typeof e){var s=(new t).parseFromString(e,"text/xml");s.firstChild&&(i=s.firstChild)}else i=e;!function t(e,r){void 0===r&&(r=a),r.type=e.nodeName;var n=e.childNodes;if(null!==n&&n.length){r.content=[];for(var o=0;o<n.length;o++)3===n[o].nodeType?n[o].nodeValue&&r.content.push(n[o].nodeValue):(r.content.push({}),t(n[o],r.content[r.content.length-1]))}if(null!==e.attributes&&e.attributes.length){r.attributes={};for(var i=0;i<e.attributes.length;i++)r.attributes[e.attributes[i].nodeName]=e.attributes[i].nodeValue}}(i),n(r?JSON.stringify(a):a)}catch(t){o(t)}}))}catch(t){return Promise.reject(t)}},r=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"],n=function(e,n){void 0===n&&(n=!0);try{return Promise.resolve(new Promise(function(o,i){try{var a=e;"string"==typeof e&&(a=JSON.parse(e));var s=function t(e){var n="<"+e.type;return e.attributes&&Object.entries(e.attributes).forEach(function(t){n+=" "+t[0]+'="'+t[1]+'"'}),n+=">",e.content&&e.content.forEach(function(e){n+="string"==typeof e?e:t(e)}),r.includes(e.type)||(n+="</"+e.type+">"),n}(a);o(n?s:(new t).parseFromString(s,"text/xml"))}catch(t){i(t)}}))}catch(t){return Promise.reject(t)}};export{e as HTMLToJSON,n as JSONToHTML};
//# sourceMappingURL=index.module.js.map
